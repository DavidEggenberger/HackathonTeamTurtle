@inject NavigationManager navigationManager
<style>
    button{
        color: white;
        font-size: 22px;
        border-radius: 3px;
        border: 3px solid white;
        padding: 3px;
        cursor: pointer;
    }
</style>
<div class="LearningRessourceComponent">
    @foreach (var item in ressources)
    {
        <div class="LearningRessource">
            <div class="Header" style="padding: 3px;">
                <h3>@item.RessourceDTO.Description</h3>
                <div @onclick="() => item.Expanded = !item.Expanded">
                    @if (item.Expanded)
                    {
                        <img style="transform: rotate(180deg);" src="/down-arrow.png" />
                    }
                    else
                    {
                        <img src="/down-arrow.png" />
                    }
                </div>
            </div>
            @if (item.Expanded)
            {
                <div class="expandable">
                    <button @onclick='() => navigationManager.NavigateTo(item.RessourceDTO.LinkURI, true)'>Visit LearningRessource</button>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public LearningPathDTO LearningPathDTO { get; set; }
    private List<Ressource> ressources;
    protected override async Task OnInitializedAsync()
    {
        ressources = LearningPathDTO.LearningRessourceDTOs.Select(s => new Ressource
        {
            Expanded = false,
            RessourceDTO = s
        }).ToList();
    }

    class Ressource
    {
        public bool Expanded { get; set; }
        public LearningRessourceDTO RessourceDTO { get; set; }
    }

}
