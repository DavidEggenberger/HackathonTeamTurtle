@inject IHttpClientFactory httpClientFactory
<style>
    .spinner {
  width: 50px;
  height: 40px;
  text-align: center;
  font-size: 10px;
}

.spinner > div {
  background-color: white;
  height: 100%;
  width: 6px;
  display: inline-block;

  -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;
  animation: sk-stretchdelay 1.2s infinite ease-in-out;
}

.spinner .rect2 {
  -webkit-animation-delay: -1.1s;
  animation-delay: -1.1s;
}

.spinner .rect3 {
  -webkit-animation-delay: -1.0s;
  animation-delay: -1.0s;
}

.spinner .rect4 {
  -webkit-animation-delay: -0.9s;
  animation-delay: -0.9s;
}

.spinner .rect5 {
  -webkit-animation-delay: -0.8s;
  animation-delay: -0.8s;
}

@@webkit-keyframes sk-stretchdelay {
  0%, 40%, 100% { -webkit-transform: scaleY(0.4) }
  20% { -webkit-transform: scaleY(1.0) }
}

@@keyframes sk-stretchdelay {
  0%, 40%, 100% {
    transform: scaleY(0.4);
    -webkit-transform: scaleY(0.4);
  }  20% {
    transform: scaleY(1.0);
    -webkit-transform: scaleY(1.0);
  }
}
</style>
<style>
    ul, li {
        margin-top: 3px;
        font-size: 6px;
    }
</style>
<div class="card">
    <div class="card-body">
        <h4 style="margin-bottom: 5px; margin-top: 5px;">Add a link to an external Blog</h4>
        <EditForm Model="Node.LearningRessourceDTO">
            <DataAnnotationsValidator />
            <label>Description:</label>
            <ValidationMessage For="() => Node.LearningRessourceDTO.Description" />
            <InputTextOnInput @bind-Value="Node.LearningRessourceDTO.Description" />
            <label style="display: block;">Link to Blog:</label>
            <ValidationMessage For="() => Node.LearningRessourceDTO.LinkURI" />
            <InputTextOnInput @bind-Value="Node.LearningRessourceDTO.LinkURI" />
        </EditForm>      
        <button style="margin: 5px; height: 22px; color: white; cursor: pointer;" @onclick="async() => await Save()">Save</button>
        @if (analyzing)
        {
            <div class="spinner">
                <div class="rect1"></div>
                <div class="rect2"></div>
                <div class="rect3"></div>
                <div class="rect4"></div>
                <div class="rect5"></div>
            </div>
        }
    </div>
    @foreach (var port in Node.Ports)
    {
        <PortRenderer Port="port" />
    }
</div>

@code{
    [Parameter]
    public BlogExternNode Node { get; set; }
    private bool analyzing;
    public async Task Save()
    {
        analyzing = true;
        await httpClientFactory.CreateClient("UnauthenticatedHttpClient").PostAsJsonAsync("api/TextAnalysis", new { WebPageUri = Node.LearningRessourceDTO.LinkURI });
        analyzing = false;
        StateHasChanged();
    }
}
