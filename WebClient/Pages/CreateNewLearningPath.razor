@page "/CreateNewLearningPath"
@inject IHttpClientFactory httpClientFactory
@inject NavigationManager navigationManager

<div class="CreateNewLearningPath">
    <aside>
        @foreach (var item in learningRessourceDisplays)
	    {
		    <section draggable="true" @ondragstart="() => DragStart(item)">
                @item.Description
            </section>
	    }
    </aside>
    <div style="height: 100%; width: 100%;">
        <div class="DiagramContainer" ondragover="event.preventDefault();" dropzone @ondrop="OnDrop">
            <CascadingValue Value="configuredLearningPath">
                <CascadingValue Value="diagram">
                    <DiagramCanvas></DiagramCanvas>
                </CascadingValue>
            </CascadingValue>      
            <div style="height: 10%; display: grid; place-content: center;">
                <AuthorizeView>
                    <Authorized>
                        <button @onclick="async() => await PostLearningPath()">Create LearningPath!</button>
                    </Authorized>
                    <NotAuthorized>
                        <button @onclick='() => navigationManager.NavigateTo("authentication/login", true)'>Login to Create LearningPath!</button>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
    <div class="arrow">
        <h4>Flow of the Learnpath</h4>
        <img src="/left-arrow.png" />
    </div>
</div>

@code{
    public LearningPathDTO configuredLearningPath;
    private LearningRessourceDisplay draggedLearningRessource;
    private Diagram diagram;
    private List<LearningRessourceDisplay> learningRessourceDisplays;
    protected override async Task OnInitializedAsync()
    {
        configuredLearningPath = new LearningPathDTO
        {
            LearningRessourceDTOs = new List<LearningRessourceDTO>()
        };
        learningRessourceDisplays = new List<LearningRessourceDisplay>
        {
            new LearningRessourceDisplay
            {
                IconURI = "",
                Description = "Link to an external video (For example Youtube)",
                LearningRessourceType = "VideoExtern"
            },
            new LearningRessourceDisplay
            {
                IconURI = "",
                Description = "Linkt to an external Blog article",
                LearningRessourceType = "BlogExtern"
            },
            new LearningRessourceDisplay
            {
                IconURI = "",
                Description = "A quiz to test the learnt knowledge",
                LearningRessourceType = "Quiz"
            }
        };
        var options = new DiagramOptions
        {
            DeleteKey = "Delete",
            DefaultNodeComponent = null,
            AllowMultiSelection = true,
            AllowPanning = false,
            Zoom = new DiagramZoomOptions
            {
                Enabled = false
            },
            Links = new DiagramLinkOptions
            {
                DefaultColor = "white"
            }
        };
        diagram = new Diagram(options);
        diagram.RegisterModelComponent<LearningPathStartNode, LearningPathStartComponent>();
        diagram.RegisterModelComponent<BlogExternNode, BlogExternComponent>();
        diagram.RegisterModelComponent<VideoExternNode, VideoExternComponent>();
        diagram.RegisterModelComponent<QuizNode, QuizRessourceComponent>();
        StateHasChanged();
        await Task.Delay(100);
        diagram.Nodes.Add(new LearningPathStartNode(new Point(diagram.Container.Width / 2 - 120, 30)));
        diagram.Links.Added += b =>
        {
            b.TargetPortChanged += (bt, old, niw) =>
            {
                LearningRessourceDTO learningRessourceDTO = ((LearningRessourceNodeModel)bt.TargetPort.Parent).LearningRessourceDTO;
                configuredLearningPath.LearningRessourceDTOs.Add(new LearningRessourceDTO
                {
                    Description = learningRessourceDTO.Description,
                    IsVideo = learningRessourceDTO.IsVideo,
                    LinkURI = learningRessourceDTO.LinkURI,
                    Name = learningRessourceDTO.Name,
                    QuizQuestions = learningRessourceDTO.QuizQuestions
                });
            };
        };
    }
    private class LearningRessourceDisplay
    {
        public string IconURI { get; set; }
        public string Description { get; set; }
        public string LearningRessourceType { get; set; }
    }
    public void OnDrop(DragEventArgs e)
    {
        var position = diagram.GetRelativeMousePoint(e.ClientX, e.ClientY);
        Point point = new Point(position.X, position.Y);
        NodeModel nodeModel = draggedLearningRessource.LearningRessourceType switch
        {
            "VideoExtern" => new VideoExternNode(point) { LearningRessourceDTO = new LearningRessourceDTO()  },
            "BlogExtern" => new BlogExternNode(point) { LearningRessourceDTO = new LearningRessourceDTO() },
            "Quiz" => new QuizNode(point) { LearningRessourceDTO = new LearningRessourceDTO() { QuizQuestions = new List<QuizQuestionDTO>() } },
            _ => null
        };
        if(nodeModel != null)
        {
            diagram.Nodes.Add(nodeModel);
        }
        draggedLearningRessource = null;
    }
    private void DragStart(LearningRessourceDisplay learningRessource)
    {
        draggedLearningRessource = learningRessource;
    }
    public async Task PostLearningPath()
    {
        await httpClientFactory.CreateClient("WebAPI").PostAsJsonAsync<LearningPathDTO>("api/learningpath", configuredLearningPath);
    }
}
