@page "/LearnPath/{LearnPathId:guid}"
@inject IHttpClientFactory httpClientFactory
@inject NavigationManager navigation
@inject IAccessTokenProvider tokenProvider

<div class="LearnPathContainer">
    <div class="LearnPathSection">
        <div class="header" style="display: flex; justify-content: space-between; width: 75%;">
            @if (learningPathDTO != null)
            {
                if (learningPathDTO.RetrievingUserEnrolled)
                {
                    <button @onclick="async() => await UnEnrollInLearningPath()">Unenroll from LearningPath</button>
                }
                else
                {
                    <AuthorizeView>
                        <Authorized>
                            <button @onclick="async() => await EnrollInLearningPath()">Enroll in LearningPath</button>
                        </Authorized>
                        <NotAuthorized>
                            <button @onclick='() => navigation.NavigateTo("/authnetication/login")'>Login to Enroll in LearningPath</button>
                        </NotAuthorized>
                    </AuthorizeView>
                }
            }
            <button @onclick='() => navigation.NavigateTo("/")'>Back to Overview</button>
        </div>
        <div class="LearningSection">
            <h2>@learningPathDTO?.Name</h2>
            @if (learningPathDTO != null)
            {
                <LearningRessourceComponent LearningPathDTO="learningPathDTO" />
            }
        </div>
    </div>
    <div class="ChatSection">
        <h3>Ask questions, empower others!</h3>
        <div class="Chat">
            <div class="messages">
                <div class="onlineUsers" style="margin-bottom: 10px; border-bottom: 3px solid white;">
                    <h5 style="text-decoration: none; margin: 4px 0;">There are currently: @users.Count() 🐢 online</h5>
                    <h5 style="text-decoration: none; margin: 4px 0;" @onclick='() => navigation.NavigateTo("/Profile")'>You only appear if you have a public profile</h5>
                </div>
                @if (messages != null)
                {
                    @foreach (var item in messages)
                    {
                        <div class="message">
                            @item.Message
                        </div>
                    }
                }
            </div>
            @if (learningPathDTO != null && !learningPathDTO.RetrievingUserEnrolled)
            {
                <div style="justify-content: space-between;">
                    <AuthorizeView>
                        <Authorized>
                            <button @onclick="async() => await EnrollInLearningPath()">Enroll to chat</button>
                        </Authorized>
                        <NotAuthorized>
                            <input @bind="message" />
                            <button @onclick='() => navigation.NavigateTo("/authentication/login")'>Login to Enroll and Chat</button>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            }
            else
            {
                <div class="chatButton" style="display: grid; justify-content: center; align-content: center;">
                    <input @bind="message" />
                    <button style="margin-top: 5px;" @onclick='Chat'>Send Message</button>
                </div>
            }
        </div>
    </div>
</div>

@code{

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    public HubConnection hubConnection;
    public string id { get; set; }

    string message = string.Empty;
    private List<MessageDTO> messages;
    [CascadingParameter]
    public HubConnection HubConnection { get; set; }
    private LearningPathDTO learningPathDTO;
    [Parameter]
    public Guid LearnPathId { get; set; }
    private List<ApplicationUserDTO> users;
    protected override async Task OnInitializedAsync()
    {
        users = new List<ApplicationUserDTO>();
        messages = new List<MessageDTO>();
        ClaimsPrincipal claimsPrincipal;
        if ((claimsPrincipal = (await AuthState).User).Identity.IsAuthenticated)
        {
            id = claimsPrincipal.Claims.First(sb => sb.Type == "sub").Value;
            AccessToken token = new AccessToken();

            (await tokenProvider.RequestAccessToken()).TryGetToken(out token);

            if (token is not null)
            {
                hubConnection = new HubConnectionBuilder()
                .WithUrl(navigation.ToAbsoluteUri("/hub"), options =>
                {
                    options.AccessTokenProvider = async () => token.Value;
                })
                .Build();
                await hubConnection.StartAsync();
                StateHasChanged();
                learningPathDTO = await httpClientFactory.CreateClient("WebAPI").GetFromJsonAsync<LearningPathDTO>($"/api/learningpath/{LearnPathId}");
                hubConnection.On("Update", GetMessages);
                await hubConnection.InvokeAsync("Learn", new MessageDTO { LearningPathId = LearnPathId });
                await GetMessages();
            }
        }
        else
        {
            learningPathDTO = await httpClientFactory.CreateClient("UnauthenticatedHttpClient").GetFromJsonAsync<LearningPathDTO>($"/api/learningpath/{LearnPathId}");
            users = await httpClientFactory.CreateClient("UnauthenticatedHttpClient").GetFromJsonAsync<List<ApplicationUserDTO>>($"/api/applicationuser/{LearnPathId}");
        }
    }
    public async Task EnrollInLearningPath()
    {
        await httpClientFactory.CreateClient("WebAPI").PostAsync($"/api/learningpath/{LearnPathId}", new StringContent(string.Empty));
        learningPathDTO = await httpClientFactory.CreateClient("WebAPI").GetFromJsonAsync<LearningPathDTO>($"/api/learningpath/{LearnPathId}");
    }
    public async Task UnEnrollInLearningPath()
    {
        await httpClientFactory.CreateClient("WebAPI").PostAsync($"/api/learningpath/unenroll/{LearnPathId}", new StringContent(string.Empty));
        learningPathDTO = await httpClientFactory.CreateClient("WebAPI").GetFromJsonAsync<LearningPathDTO>($"/api/learningpath/{LearnPathId}");
    }
    public async Task GetMessages()
    {
        messages = await httpClientFactory.CreateClient("UnauthenticatedHttpClient").GetFromJsonAsync<List<MessageDTO>>($"/api/learningpath/messages/{LearnPathId}");
        users = await httpClientFactory.CreateClient("UnauthenticatedHttpClient").GetFromJsonAsync<List<ApplicationUserDTO>>($"/api/applicationuser/{LearnPathId}");
        StateHasChanged();
    }
    public async Task Chat()
    {
        await Index.hubConnection.InvokeAsync("Chat", new MessageDTO
        {
            Message = message,
            LearningPathId = LearnPathId,
            SenderId = id
        });
        message = string.Empty;
    }
}
